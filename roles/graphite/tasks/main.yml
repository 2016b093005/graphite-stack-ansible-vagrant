- include_vars: "{{ ansible_os_family }}.yml"

- name: install required packages for graphite debian/ubuntu
  apt: pkg={{ item }} state=latest
  with_items:
    - memcached
    - libcairo2-dev
    - libffi-dev # for cairocffi
  when: ansible_os_family == "Debian"

- name: install required packages for graphite redhat/centos
  yum: pkg={{ item }} state=latest
  with_items:
    - memcached
    - cairo-devel
    - bitmap-fonts
    - libffi-devel # for cairocffi
  when: ansible_os_family == "RedHat"

- name: ensure graphite directory exists
  file:
    path: /opt/graphite/
    state: directory

- name: create virtualenv if needed, install graphite python deps and install graphite itself
  pip: name={{ item }} virtualenv=/opt/graphite chdir=/opt/graphite virtualenv_site_packages=no
  with_items:
    - psycopg2
    - scandir
    - gunicorn
    - python-memcached
    - https://github.com/graphite-project/whisper/tarball/master
    - https://github.com/graphite-project/carbon/tarball/master
    - https://github.com/graphite-project/graphite-web/tarball/master

# CARBON CONFIG

- name: Configure carbon cache
  template: src=carbon.conf.j2 dest=/opt/graphite/conf/carbon.conf mode=0644

- name: Configure carbon storage schema
  template: src=storage-schemas.conf.j2 dest=/opt/graphite/conf/storage-schemas.conf mode=0644

- name: Configure carbon storage aggregation
  template: src=storage-aggregation.conf.j2 dest=/opt/graphite/conf/storage-aggregation.conf mode=0644

# GRAPHITE WEBAPP CONFIG

- name: graphite conf
  template: src=local_settings.py.j2 dest=/opt/graphite/webapp/graphite/local_settings.py mode=0644

- name: migrate auth for graphite
  shell: export PYTHONPATH=/opt/graphite/webapp/; /opt/graphite/bin/python /opt/graphite/bin/django-admin.py migrate auth --settings=graphite.settings --noinput

- name: migrate the rest for graphite
  shell: export PYTHONPATH=/opt/graphite/webapp/; /opt/graphite/bin/python /opt/graphite/bin/django-admin.py migrate --settings=graphite.settings --run-syncdb --noinput

- name: collect static stuff
  shell: export PYTHONPATH=/opt/graphite/webapp/; /opt/graphite/bin/python /opt/graphite/bin/django-admin.py collectstatic --settings=graphite.settings --noinput

- name: copy fixtures
  copy:
    src: users.json
    dest: /tmp/users.json

- name: load fixtures
  shell: export PYTHONPATH=/opt/graphite/webapp/; /opt/graphite/bin/python /opt/graphite/bin/django-admin.py loaddata /tmp/users.json --settings=graphite.settings

- name: remove fixtures
  file:
    dest: /tmp/users.json
    state: absent

- name: graphite log folder
  file: state=directory path=/opt/graphite/storage/log/webapp

- name: graphite wsgi
  copy:
    remote_src: true
    src: /opt/graphite/conf/graphite.wsgi.example
    dest: /opt/graphite/webapp/wsgi.py

# SUPERVISOR

- name: Copy supervisor configuration for graphite
  template: src=supervisor-graphite.conf.j2 dest=/etc/supervisor/conf.d/graphite.conf
  notify: 
    - reload supervisor

# NGinx

- name: Set file permissions
  file:
    path: /opt/graphite
    state: directory
    recurse: true
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"

- name: Copy nginx configuration for graphite
  template: src=nginx-graphite.conf.j2 dest=/etc/nginx/sites-available/graphite.conf owner={{ nginx_user }} group={{ nginx_group }}

- name: Link nginx configuration for graphite
  file: src=/etc/nginx/sites-available/graphite.conf dest=/etc/nginx/sites-enabled/graphite.conf state=link owner={{ nginx_user }} group={{ nginx_group }}
  notify:
    - restart nginx
